import pretty_midi
import json
import os

def create_midi_from_section(section_data, filename):
    pm = pretty_midi.PrettyMIDI()

    # Track the instruments we've found
    found_instruments = {
        'Drum': False,
        'Piano': False,
        'Guitar': False,
        'Bass': False,
        'Other': False
    }

    # Store instruments and their total playtime
    instrument_notes = []
    max_end_time = 0  # Find the overall clip length

    for instrument_data in section_data:
        instrument_category = instrument_data.get('instrument_category', '')
        program = instrument_data.get('program', 0)
        is_drum = instrument_data.get('is_drum', False)

        if instrument_category in found_instruments:
            found_instruments[instrument_category] = True

            instrument = pretty_midi.Instrument(
                program=program,
                name=instrument_category,
                is_drum=is_drum
            )

            for note_data in instrument_data.get('notes', []):
                note_start = float(note_data['start']) - instrument_data.get('section_start', 0)
                note_end = float(note_data['end']) - instrument_data.get('section_start', 0)
                note = pretty_midi.Note(
                    velocity=int(note_data['velocity']),
                    pitch=int(note_data['pitch']),
                    start=note_start,
                    end=note_end)

                instrument.notes.append(note)
                max_end_time = max(max_end_time, note_end)

            instrument_notes.append(instrument)

    # Extend instruments to match the max duration by replicating notes without speeding them up
    for instrument in instrument_notes:
        if instrument.notes:
            current_end = max(note.end for note in instrument.notes)
            first_start = min(note.start for note in instrument.notes)

            while current_end < max_end_time:
                # Create new notes by replicating existing ones
                replicated_notes = []
                for note in instrument.notes:
                    # Calculate the new start and end times for the replicated note
                    duration = note.end - note.start
                    new_start = current_end + (note.start - first_start)
                    new_end = new_start + duration

                    # Stop replication if it exceeds max_end_time
                    if new_start >= max_end_time:
                        break
                    if new_end > max_end_time:
                        new_end = max_end_time

                    replicated_notes.append(
                        pretty_midi.Note(
                            velocity=note.velocity,
                            pitch=note.pitch,
                            start=new_start,
                            end=new_end
                        )
                    )

                # Append replicated notes and update current_end
                instrument.notes.extend(replicated_notes)
                current_end = max(note.end for note in instrument.notes)

    # Align start times of all tracks
    for instrument in instrument_notes:
        if instrument.notes:
            min_start = min(note.start for note in instrument.notes)
            for note in instrument.notes:
                note.start -= min_start
                note.end -= min_start

    # Add all instruments to the MIDI object
    for instrument in instrument_notes:
        print(f"Processing {instrument.name}")
        pm.instruments.append(instrument)

    # Check if we found all 5 instruments
    missing = [inst for inst, found in found_instruments.items() if not found]
    if missing:
        print(f"Warning: Missing instruments in section: {', '.join(missing)}")

    pm.write(filename)


def process_json_to_midi(json_data, output_dir):
    os.makedirs(output_dir, exist_ok=True)

    for i, section in enumerate(json_data):
        print(f"\nProcessing section {i+1}")
        instruments = []
        if isinstance(section, list):
            for group in section:
                if isinstance(group, list):
                    for item in group:
                        if isinstance(item, dict) and 'notes' in item:
                            instruments.append(item)

        if instruments:
            filename = os.path.join(output_dir, f"section_{i+1}.mid")
            create_midi_from_section(instruments, filename)


# Load JSON data
with open('initial_population.json', 'r') as f:
    json_data = json.load(f)

# Specify output directory
output_directory = "output"

# Process JSON and generate MIDI files
process_json_to_midi(json_data, output_directory)
