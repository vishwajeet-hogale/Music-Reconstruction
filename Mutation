# Mutation 

def mutation(crossover_population): 

'''
population = list of lists of all children, their genes, and the gene's features


Mutate one random feature in every gene of every child in the population. 

Tempo:
    - random tempo value. Integer 30-200
Key:
    - random key. Create a dictionary of all key types. Randomize on that dictionary 
Velocity_mean:
    - Velocity_mean. random between 0-127
    - need to handle boundary conditions  
Instrument_ID: leave for now, might get complex 

"velocity_mean": 73.76086956521739,
"pitch_mean": 44.28260869565217,
"pitch_std": 3.076298195235849,
"duration_mean": 0.29790630434782633,
"song_name": "A_Campfire_Song.mid",
"tempo": 216.00021600021577,
"time_signature": "4/4",
"key": "D-1",
"maj_min": "major"

population
	child
  	genes
    	features
'''

key_list = [ 
'B_major',
'Bb_major',
'A_major',
'Ab_major',
'G_major',
'Gb_major',
'F#_major',
'F_major',
'E_major',
'Eb_major',
'D_major',
'Db_major',
'C#_major',
'C_major',
'Cb_major',
'B_minor',
'Bb_minor',
'A#_minor',
'A_minor',
'Ab_minor',
'G#_minor',
'G_minor',
'F#_minor',
'F_minor',
'E_minor',
'Eb_minor',
'D#_minor',
'D_minor',
'D#_minor',
'C#_minor',
'C_minor'
]

# Tempo Mutation
def tempo_manipulation(value)-> int	:
	new_tempo = np.random.randint(30, 201)
  return new_tempo

# Mean_Velocity Mutation
def velocity_mean_manipulation(value)-> int:
	new_velocity_mean = np.random.randint(30, 101)
  return new_velocity_mean 

# Key Mutation 
def key_manipulation(value)-> string:
	new_key = random.choice(key_list) 
  return new_key
  

# Takes the children of the crossover, mutates the genes, then gives back the same children with the gene mutation update 
for child in crossover_population:
  for gene in child:
    index = np.random.randint(0,3)
    if index == 0:
      val = temp_manipulation(gene[# tempo index])
      gene[# tempo index] = val
    if index == 1:
      val = velocity_mean_manipulation(gene[# velocity index])
      gene[# velocity index]=val
    if index == 2:
      val = key_manipulation(gene[# key index])
      gene[#key index] = val

return crossover_population
  
  
  		
      
  	









