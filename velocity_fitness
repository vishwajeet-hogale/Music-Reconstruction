import json

def calculate_velocity_score(parent_data, tolerance=0.05):
    def is_velocity_close(v, v_avg, tolerance):
        # Check if velocity is within a small percentage (tolerance) of the average velocity
        return abs(v - v_avg) < tolerance * v_avg

    instruments = []
    total_velocity = 0

    # Process instruments for the current parent
    for instrument in parent_data:
        if instrument:
            velocity_mean = instrument[0].get('velocity_mean', 0)
            category = instrument[0].get('instrument_category', 'Unknown')
            instruments.append({
                'velocity': velocity_mean,
                'category': category
            })
            total_velocity += velocity_mean
        else:
            instruments.append({
                'velocity': 0,
                'category': 'Empty'
            })

    num_instruments = len(instruments)
    v_avg = total_velocity / num_instruments if num_instruments > 0 else 0

    # Identify valid instruments and calculate the score
    valid_instruments = [
        instrument for instrument in instruments
        if is_velocity_close(instrument['velocity'], v_avg, tolerance)
    ]
    score = len(valid_instruments) * 20
    return score, v_avg, instruments, valid_instruments

# Load data from JSON
with open('children_population.json', 'r') as file:
    data = json.load(file)

# Process each parent
for i, parent_data in enumerate(data):
    score, avg_velocity, all_instruments, valid_instruments = calculate_velocity_score(parent_data)
    
    # Display results
    print(f"\nParent {i+1}:")
    print(f"Average Velocity: {avg_velocity:.2f}")
    print("\nAll Instruments:")
    for inst in all_instruments:
        print(f"- {inst['category']}: {inst['velocity']}")
    print("\nValid Instruments:")
    for inst in valid_instruments:
        print(f"- {inst['category']}: {inst['velocity']}")
    print(f"Score: {score}")
    print("-" * 50)
